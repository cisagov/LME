name: Burndown Chart 

on: 
  workflow_dispatch:
    inputs:
      start_date:
        description: 'Sprint start date (YYYY-MM-DD)'
        required: true
        type: string
      end_date:
        description: 'Sprint end date (YYYY-MM-DD)'
        required: true
        type: string
      view:
        description: 'View number'
        required: true
        type: string
    
  pull_request:
    branches:
      - '*'

jobs:
  create_chart:
    runs-on: ubuntu-latest
    env:
      UNIQUE_ID:      

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.1

    - name: Setup environment variables
      run: |
        echo "UNIQUE_ID=$(openssl rand -hex 3 | head -c 6)" >> $GITHUB_ENV

    - name: Run Docker Build
      run: docker compose -p ${{ env.UNIQUE_ID }} -f testing/project_management/docker-compose.yml build burndown --no-cache
      
    - name: Run Docker Compose
      env: 
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: docker compose -p ${{ env.UNIQUE_ID }} -f testing/project_management/docker-compose.yml up -d
      
    - name: List docker containers to wait for them to start
      run: |
        docker ps 

    - name: Set up the burndown chart config
      run: |
        cd testing/project_management
        docker compose -p ${{ env.UNIQUE_ID }} exec -T burndown bash -c '
          echo $BURNDOWN_TOKEN
          /lme/testing/project_management/setup_config.sh -s 2024-05-09 -e 2024-05-25 -f /github-projects-burndown-chart/src/github_projects_burndown_chart/config/config.json
          sed -i "s/\"github_token\": \"\"/\"github_token\": \"$BURNDOWN_TOKEN\"/g" /github-projects-burndown-chart/src/github_projects_burndown_chart/config/secrets.json
          cat /github-projects-burndown-chart/src/github_projects_burndown_chart/config/config.json
        '
      env:
        BURNDOWN_TOKEN: ${{ secrets.BURNDOWN_TOKEN }} 
       
    - name: List files in the current directory
      run: ls -la 

    - name: Run the burndown chart script 
      run: |
        cd testing/project_management
        docker compose -p ${{ env.UNIQUE_ID }} exec -T burndown bash -c '
          python3 /github-projects-burndown-chart/src/github_projects_burndown_chart/main.py organization LME --filepath /lme/burndown.png
        '
    - name: List files in the current directory
      run: ls -la 

    - name: Cleanup Docker Compose
      if: always()
      run: |
        cd testing/project_management
        docker compose -p ${{ env.UNIQUE_ID }} down
        # docker system prune -a --force