name: Docker Pipeline

on:
  workflow_dispatch:
    inputs:
      azure_region:
        description: 'Azure region to deploy resources'
        required: true
        default: 'centralus'
        type: choice
        options:
          - centralus
          - eastus
          - eastus2
          - westus
          - westus2
          - westus3
          - northcentralus
          - southcentralus
          - canadacentral
          - canadaeast
          - uksouth
          - ukwest
          - northeurope
          - westeurope
  # pull_request:
  #   branches:
  #     - '*'

jobs:
  build-and-deploy-docker:
    runs-on: self-hosted
    
    env:
      UNIQUE_ID: ${{ github.run_id }}-${{ github.run_number }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      AZURE_IP: ""
      IP_ADDRESS: ""

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.1
      
    - name: Set the environment for docker compose
      run: |
        cd testing/v2/development
        echo "HOST_UID=$(id -u)" > .env
        echo "HOST_GID=$(id -g)" >> .env
        PUBLIC_IP=$(curl -s https://api.ipify.org)
        echo "IP_ADDRESS=$PUBLIC_IP" >> $GITHUB_ENV

        
    - name: Start pipeline container
      run: |
        cd testing/v2/development
        docker compose -p ${{ env.UNIQUE_ID }} up -d pipeline
        
    - name: Install Python requirements
      run: |
        cd testing/v2/development
        docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
          cd /home/lme-user/LME/testing/v2/installers/azure && \
          pip install -r requirements.txt
        "
        
    - name: Build an Azure instance 
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      run: |
        cd testing/v2/development
        docker compose -p ${{ env.UNIQUE_ID }} exec -T \
          -e AZURE_CLIENT_ID \
          -e AZURE_CLIENT_SECRET \
          -e AZURE_TENANT_ID \
          -e AZURE_SUBSCRIPTION_ID \
          pipeline bash -c "
            cd /home/lme-user/LME/testing/v2/installers && \
            python3 ./azure/build_azure_linux_network.py \
              -g pipe-${{ env.UNIQUE_ID }} \
              -s ${{ env.IP_ADDRESS }}/32 \
              -vs Standard_B4s_v2 \
              -l ${{ inputs.azure_region || 'centralus' }} \
              -ast 23:00 \
              -y
          "
        
    - name: Retrieve Azure IP
      run: |
        cd testing/v2/development
        AZURE_IP=$(docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "cat /home/lme-user/LME/testing/v2/installers/pipe-${{ env.UNIQUE_ID }}.ip.txt")
        echo "AZURE_IP=$AZURE_IP" >> $GITHUB_ENV
        echo "Azure IP: $AZURE_IP"
        echo "Azure IP retrieved successfully"
        
    - name: Retrieve Azure Password
      run: |
        cd testing/v2/development
        AZURE_PASS=$(docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "cat /home/lme-user/LME/testing/v2/installers/pipe-${{ env.UNIQUE_ID }}.password.txt")
        echo "AZURE_PASS=$AZURE_PASS" >> $GITHUB_ENV
        echo "Azure Password retrieved successfully"
        
    - name: Copy SSH Key to Azure instance
      run: |
        cd testing/v2/development
        docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
          cd /home/lme-user/LME/testing/v2/installers && \
          ./lib/copy_ssh_key.sh lme-user ${{ env.AZURE_IP }} /home/lme-user/LME/testing/v2/installers/pipe-${{ env.UNIQUE_ID }}.password.txt
        "
        
    - name: Clone repository on Azure instance
      run: |
        cd testing/v2/development
        docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
          cd /home/lme-user/LME/testing/v2/installers && \
          IP_ADDRESS=\$(cat docker-${{ env.UNIQUE_ID }}.ip.txt) && \
          ssh lme-user@\$IP_ADDRESS 'git clone https://github.com/username/LME.git && \
          cd LME && \
          git checkout ${{ env.BRANCH_NAME }}' 
        "

    - name: Install Docker on Azure instance
      run: |
        cd testing/v2/development
        docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
          cd /home/lme-user/LME/testing/v2/installers && \
          IP_ADDRESS=\$(cat docker-${{ env.UNIQUE_ID }}.ip.txt) && \
          ssh lme-user@\$IP_ADDRESS 'chmod +x ~/LME/docker/install_latest_docker_in_ubuntu.sh && \
            sudo ~/LME/docker/install_latest_docker_in_ubuntu.sh && \
            sudo usermod -aG docker \$USER && \
            sudo systemctl enable docker && \
            sudo systemctl start docker'
        "

    - name: Deploy Docker containers on Azure instance
      run: |
        cd testing/v2/development
        docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
          cd /home/lme-user/LME/testing/v2/installers && \
          IP_ADDRESS=\$(cat docker-${{ env.UNIQUE_ID }}.ip.txt) && \
          ssh lme-user@\$IP_ADDRESS 'cd LME/docker/22.04 && \
          sudo docker compose up -d'
        "
        
    #- name: Run tests on Docker containers
    #  run: |
    #    cd testing/v2/development
    #    docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
    #      cd /home/lme-user/LME/testing/v2/installers && \
    #      IP_ADDRESS=\$(cat docker-${{ env.UNIQUE_ID }}.ip.txt) && \
    #      ssh lme-user@\$IP_ADDRESS 'cd LME/testing/tests && \
    #      python3 -m venv venv && \
    #      source venv/bin/activate && \
    #      pip install -r requirements.txt && \
    #      pytest -v api_tests/docker/ selenium_tests/docker/'
    #    "
        
    - name: Cleanup Azure resources
      if: always()
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_SECRET: ${{ secrets.AZURE_SECRET }}
        AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      run: |
        cd testing/v2/development
        docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
          az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_SECRET --tenant $AZURE_TENANT
          az group delete --name docker-${{ env.UNIQUE_ID }} --yes --no-wait
        "
        
    - name: Stop and remove containers
      if: always()
      run: |
        cd testing/v2/development
        docker compose -p ${{ env.UNIQUE_ID }} down
        docker system prune -af 