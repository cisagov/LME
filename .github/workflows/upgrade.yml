name: Build an upgrade

on:
  workflow_dispatch:
  # pull_request:
  #   branches:
  #     - '*'

jobs:

  build-and-test-upgrade:
    runs-on: self-hosted
    env:
      UNIQUE_ID: 
      IP_ADDRESS: 
      LATEST_TAG:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
      AZURE_IP:
      elastic:
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1
    
      - name: Setup environment variables
        run: |
          PUBLIC_IP=$(curl -s https://api.ipify.org)
          echo "IP_ADDRESS=$PUBLIC_IP" >> $GITHUB_ENV
          echo "UNIQUE_ID=$(openssl rand -hex 3 | head -c 6)-${{ github.run_number }}" >> $GITHUB_ENV
          LATEST_TAG_VAR=$(curl -s https://api.github.com/repos/cisagov/LME/tags | jq -r '.[].name' | grep '^v[0-9]\+\.[0-9]\+\.[0-9]\+$' | head -n 1)
          echo "LATEST_TAG=$LATEST_TAG_VAR"
          echo "LATEST_TAG=$LATEST_TAG_VAR" >> $GITHUB_ENV
                   
      - name: Set the environment for docker compose
        run: |
          cd testing/v2/development
          echo "HOST_UID=$(id -u)" > .env
          echo "HOST_GID=$(id -g)" >> .env

      - name: Start pipeline container
        run: |
          cd testing/v2/development
          docker compose -p ${{ env.UNIQUE_ID }} up -d pipeline
          
      - name: Install Python requirements
        run: |
          cd testing/v2/development
          docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
            cd /home/lme-user/LME/testing/v2/installers/azure && \
            pip install -r requirements.txt
          "
          
      - name: Build an Azure instance 
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_SECRET }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          cd testing/v2/development
          docker compose -p ${{ env.UNIQUE_ID }} exec -T \
            -e AZURE_CLIENT_ID \
            -e AZURE_CLIENT_SECRET \
            -e AZURE_TENANT_ID \
            -e AZURE_SUBSCRIPTION_ID \
            pipeline bash -c "
              cd /home/lme-user/LME/testing/v2/installers && \
              python3 ./azure/build_azure_linux_network.py \
                -g pipe-${{ env.UNIQUE_ID }} \
                -s ${{ env.IP_ADDRESS }}/32 \
                -vs Standard_E4d_v4 \
                -l centralus \
                -ast 23:00 \
                -y
            "
      

          
      - name:  Install lme on cluster 
        run: |
          cd testing/v2/development
          docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
            sleep 60 &&
            pwd && \
            ls -la && \
            cd /home/lme-user/LME/testing/v2/installers && \
            IP_ADDRESS=\$(cat pipe-${{ env.UNIQUE_ID }}.ip.txt) && \
            ./install_v2/install_pre_v2.1.sh lme-user \$IP_ADDRESS \"pipe-${{ env.UNIQUE_ID }}.password.txt\" '${{ env.LATEST_TAG }}'
          "
    
      - name: Retrieve Elastic password 
        run: |
          cd testing/v2/development
          AZURE_IP=$(docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "cat /home/lme-user/LME/testing/v2/installers/pipe-${{ env.UNIQUE_ID }}.ip.txt")
          echo "AZURE_IP=$AZURE_IP" >> $GITHUB_ENV
          echo "Azure IP:$AZURE_IP"
          echo "Azure IP retrieved successfully"

          ES_PASSWORD=$(docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "ssh lme-user@$AZURE_IP '. /home/lme-user/LME/scripts/extract_secrets.sh -q && echo \$elastic'" | tail -n 1 | tr -d '\n')
          echo "::add-mask::$ES_PASSWORD"
          echo "elastic=$ES_PASSWORD" >> $GITHUB_ENV
          KIBANA_PASSWORD=$(docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "ssh lme-user@$AZURE_IP '. /home/lme-user/LME/scripts/extract_secrets.sh -q && echo \$kibana_system'" | tail -n 1 | tr -d '\n')
          echo "::add-mask::$KIBANA_PASSWORD"
          echo "kibana=$KIBANA_PASSWORD" >> $GITHUB_ENV
          echo "Kibana password retrieved successfully."
    
      - name:  Check that the environment variables are set 
        run: |
          cd testing/v2/development
          docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
            if [ -z \"${{ env.elastic }}\" ]; then
              echo 'Error: env.elastic variable is not set' >&2
              exit 1
            else
              echo 'Elastic password is set'
            fi
          "

      - name: Upgrade to the version being built
        # This will update the existing LME installation and run the new Ansible-based upgrade system via SSH.
        run: |
          set +e
          cd testing/v2/development
          output=$(docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
            cd /home/lme-user/LME/testing/v2/installers && \
            IP_ADDRESS=\$(cat pipe-${{ env.UNIQUE_ID }}.ip.txt) && \
            echo \"Connecting to \$IP_ADDRESS to upgrade LME to branch: ${{ env.BRANCH_NAME }}\" && \
            ssh -o StrictHostKeyChecking=no lme-user@\$IP_ADDRESS 'set -e && \
              echo \"Current user: \$(whoami)\" && \
              echo \"Working directory: \$(pwd)\" && \
              echo \"LME directory contents:\" && \
              ls -la ~/LME/ && \
              echo \"Updating LME installation to branch: ${{ env.BRANCH_NAME }}\" && \
              cd ~/LME && \
              git fetch --all --tags && \
              if git show-ref --tags --verify --quiet \"refs/tags/${{ env.BRANCH_NAME }}\"; then \
                echo \"Checking out tag: ${{ env.BRANCH_NAME }}\" && \
                git checkout ${{ env.BRANCH_NAME }}; \
              else \
                echo \"Checking out branch: ${{ env.BRANCH_NAME }}\" && \
                git checkout ${{ env.BRANCH_NAME }} || git checkout -t origin/${{ env.BRANCH_NAME }}; \
              fi && \
              echo \"Updated to: \$(git rev-parse --short HEAD) on \$(git branch --show-current || git describe --tags --exact-match 2>/dev/null || echo \"detached HEAD\")\" && \
              echo \"Running Ansible upgrade...\" && \
              cd ~/LME/ansible && \
              ansible-playbook upgrade_lme.yml -e skip_prompts=true && \
              echo \"UPGRADE_SUCCESSFUL\"'")
          echo "Output: $output"
          if echo "$output" | grep -q "UPGRADE_SUCCESSFUL"; then
            echo "Upgrade successful"
            exit 0
          else
            echo "Upgrade failed"
            exit 1
          fi
    
    
      - name: Install test requirements on Azure instance
        run: |
          cd testing/v2/development
          docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
            cd /home/lme-user/LME/testing/v2/installers && \
            IP_ADDRESS=\$(cat pipe-${{ env.UNIQUE_ID }}.ip.txt) && \
            ssh lme-user@\$IP_ADDRESS  'whoami && hostname && \
            wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb && \
            sudo apt install -y ./google-chrome-stable_current_amd64.deb && \
            cd /home/lme-user/LME/testing/tests && \
            python3 -m venv venv && \
            source venv/bin/activate && \
            pip install -r requirements.txt '
          "
      
      # This only passes when you do a full install
      - name: Run api tests on Azure instance
        env:
          ES_PASSWORD: ${{ env.elastic }}
          KIBANA_PASSWORD: ${{ env.kibana }}
          AZURE_IP: ${{ env.AZURE_IP }}
        run: |
          cd testing/v2/development
          docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
            cd /home/lme-user/LME/testing/v2/installers && \
            IP_ADDRESS=\$(cat pipe-${{ env.UNIQUE_ID }}.ip.txt) && \
            ssh lme-user@\$IP_ADDRESS  'cd /home/lme-user/LME/testing/tests && \
            echo ELASTIC_PASSWORD=\"$ES_PASSWORD\" >> .env && \
            echo KIBANA_PASSWORD=\"$KIBANA_PASSWORD\" >> .env && \
            echo elastic=\"$ES_PASSWORD\" >> .env && \
            cat .env && \
            source venv/bin/activate && \
            pytest -v api_tests/linux_only/'
          "
    
      - name: Run selenium tests on Azure instance
        env:
          ES_PASSWORD: ${{ env.elastic }}
          KIBANA_PASSWORD: ${{ env.kibana }}
          AZURE_IP: ${{ env.AZURE_IP }}
        run: |
          cd testing/v2/development
          docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
            cd /home/lme-user/LME/testing/v2/installers && \
            IP_ADDRESS=\$(cat pipe-${{ env.UNIQUE_ID }}.ip.txt) && \
            ssh lme-user@\$IP_ADDRESS  'cd /home/lme-user/LME/testing/tests && \
            echo ELASTIC_PASSWORD=\"$ES_PASSWORD\" >> .env && \
            echo KIBANA_PASSWORD=\"$KIBANA_PASSWORD\" >> .env && \
            echo elastic=\"$ES_PASSWORD\" >> .env && \
            cat .env && \
            source venv/bin/activate && \
            pytest -v selenium_tests/linux_only/'
          "
    
      - name: Cleanup Azure resources
        if: always()
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_SECRET: ${{ secrets.AZURE_SECRET }}
          AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          cd testing/v2/development
          docker compose -p ${{ env.UNIQUE_ID }} exec -T pipeline bash -c "
            az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_SECRET --tenant $AZURE_TENANT
            az group delete --name pipe-${{ env.UNIQUE_ID }} --yes --no-wait
          "
          
      - name: Stop and remove containers
        if: always()
        run: |
          cd testing/v2/development
          docker compose -p ${{ env.UNIQUE_ID }} down
          docker system prune -af