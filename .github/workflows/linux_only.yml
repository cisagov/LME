name: Linux Only

on:
  workflow_dispatch:
  pull_request:
    branches:
      - '*'

jobs:
  build-and-test-linux-only:
    runs-on: self-hosted
    
    env:
      UNIQUE_ID: ${{ github.run_id }}-${{ github.run_number }}
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4.1.1
      
    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        
    - name: Set the environment for docker-compose
      run: |
        cd testing/v2/development
        echo "HOST_UID=$(id -u)" > .env
        echo "HOST_GID=$(id -g)" >> .env
        
    - name: Start pipeline container
      run: |
        cd testing/v2/development
        docker-compose up -d pipeline
        
    - name: Run build_azure_linux_network script
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_SECRET: ${{ secrets.AZURE_SECRET }}
        AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      run: |
        cd testing/v2/development
        docker-compose exec -T pipeline bash -c "
          cd /home/lme-user/LME/testing/v2/installers/azure && \
          python3 build_azure_linux_network.py \
            -g ${{ env.UNIQUE_ID }} \
            -s 0.0.0.0/0 \
            -vs Standard_B2s \
            -l westus \
            -ast 23:00 \
            -y
        "
        
    - name: Install LME
      run: |
        cd testing/v2/development
        docker-compose exec -T pipeline bash -c "
          cd /home/lme-user/LME/testing/v2/installers/install_v2 && \
          ./install.sh lme-user \$(cat ../azure/${{ env.UNIQUE_ID }}.ip.txt) ../azure/${{ env.UNIQUE_ID }}.password.txt ${{ env.BRANCH_NAME }}
        "
        
    - name: Run tests
      run: |
        cd testing/v2/development
        docker-compose exec -T pipeline bash -c "
          cd /home/lme-user/LME/testing/tests && \
          python3 -m venv venv && \
          source venv/bin/activate && \
          pip install -r requirements.txt && \
          pytest -v api_tests/linux_only/ selenium_tests/linux_only/
        "
        
    - name: Cleanup Azure resources
      if: always()
      env:
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_SECRET: ${{ secrets.AZURE_SECRET }}
        AZURE_TENANT: ${{ secrets.AZURE_TENANT }}
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      run: |
        cd testing/v2/development
        docker-compose exec -T pipeline bash -c "
          az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_SECRET --tenant $AZURE_TENANT
          az group delete --name ${{ env.UNIQUE_ID }} --yes --no-wait
        "
        
    - name: Stop and remove containers
      if: always()
      run: |
        cd testing/v2/development
        docker-compose down
        docker system prune -af